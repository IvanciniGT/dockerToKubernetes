# 3 Contenedores:
#       miapache -> Mínimo 2.... dependiendo de la carga de trabajo montaré más.
#       filebeat -> Tantos como apaches.
#       logstash -> 2
# 5 nodos físicos en mi cluster de kubernetes
#   Nodo 1: miapache + filebeat
#   Nodo 2: miapache + filebeat
#   Nodo 3: logstash
#   Nodo 4: logstash
#   Nodo 5: vacio
# 2 Servicios: 
#   Servicio 1: WEB acceso a la pagina web (apache)           PUBLICO ??? SI
#   Servicio 2: Logstash: Quien accede al logstash? FILEBEAT. PUBLICO ??? NO
#   Filebeat. Quien accede a fileat???  NADIE : NO ES UN SERVICIO QUE OFREZCO
# Clientes... MUCHOS !!!
# IP para acceder a los servicios del cluster de kubernetes

# Muchos ficheros: 4 documento: 2 Servicios + 2 Pods: Cada uno es un documento
# En YAML podemos meter varios documentos en un unico fichero
# Los documentos los separaro con ---
---
# Servicio WEB:      PUBLICO
apiVersion: v1
kind: Service
metadata: # Atributos, etiquetas relacionadas con el objeto que defino
    name: servicio_apache
spec:
---
# Servicio Logstash: PRIVADO
apiVersion: v1
kind: Service
metadata: # Atributos, etiquetas relacionadas con el objeto que defino
    name: servicio_logstash
spec:
---
# Pod1: 
    # Contenedor1: miapache
    # Contenedor2: filebeat
apiVersion: v1
kind: Pod
metadata: # Atributos, etiquetas relacionadas con el objeto que defino
    name: pod_apache
spec:
    containers: # Procesos aislados que arrancan y no paran
        - name: contenedor_apache
          image: httpd
          ports:
            - containerPort: 80
          volumeMounts:
            - name: logs
              mountPath: /logs # Ruta dentro del contenedor
            - name: fichero_apache
              mountPath: /usr/local/apache2/conf/httpd.conf # Ruta dentro del contenedor
        - name: contenedor_filebeat
          image: docker.elastic.co/beats/filebeat:7.8.0
          volumeMounts:
            - name: logs
              mountPath: /logs # Podrian ser rutas distintas
            - name: fichero_filebeat
              mountPath: /usr/share/filebeat/filebeat.yml
    initContainers: # Procesos aislados que arrancan y ACABA
    # Despues de acabar todos los init containers que se ejecutan SECUENCIALMENTE,
    # Se inician los Containers
        # Nos vamos de definir un contenedor inicial, para que clone el repo
        - name: ClonadorConfigApache
          image: ubuntu
          # | Permite meter varias lineas (se mantiene el resultado en varias lineas)
          # > Permite meter varias lineas (el resultado se aplana a 1 linea)
          command: >
            ['sh' , '-c' , 'apt update -y && apt install git -y && 
            git clone https://github.com/IvanciniGT/dockerToKubernetes_ApacheConfig /apache']
          volumeMounts:
            - name: fichero_apache
              mountPath: /apache/httpd.conf
            - name: fichero_filebeat
              mountPath: /apache/filebeat.yml

    volumes:
        - name: logs
          # donde??? Maquina fisica, red, cloud, cabina
          # La quiero en la máquina física en este caso concreto
          emptyDir: #{}
            medium: Memory # Velocidad
        - name: fichero_apache
          emptyDir: {}
        - name: fichero_filebeat
          emptyDir: {}
          # Alternativas: Montar una carpeta NFS <- RUINA
          # Alternativas: Montar una imagen nueva del contenedor con el archivo incrustado
          # GIT : Repo con el archivo <- IDEAL !!!!
          #hostPath:
          #  path: /home/ubuntu/envirnment/curso/docker/compose/apache/httpd.conf
          #  type: File
---
# Pod2:
    # Contenedor3: logstash
apiVersion: v1
kind: Pod
metadata: # Atributos, etiquetas relacionadas con el objeto que defino
    name: pod_logstash
spec:
    containers:
        - name: contenedor_logstash
          image: docker.elastic.co/logstash/logstash:7.8.0
          ports:
            - containerPort: 5044
          env:
            - name: MONITORING_ENABLED
              value: 'false'
          volumeMounts:
            - name: fichero_logstash
              mountPath: /usr/share/logstash/pipeline/logstash.conf
    initContainers:
        - name: ClonadorConfigLogstash
          image: ubuntu
          command: >
            ['sh' , '-c' , 'apt update -y && apt install git -y && 
            git clone https://github.com/IvanciniGT/dockerToKubernetes_ApacheConfig /logstash']
          volumeMounts:
            - name: fichero_logstash
              mountPath: /logstash/logstash.conf
    volumes:
        - name: fichero_logstash
          emptyDir: {}
---

# cli              servicio de docker
#  v                       v
#docker run        ->   dockerd 
#
# cli              servicio de docker
#  v                       v
#docker-compose    ->   dockerd
#
# cli            servicio de kubernetes          servicio de docker
#  v                 v                                  v
#kubectl     ->   kubelet                    ->      dockerd                 ->   containerd       ->        runc 
#                (1 por maquina)                     (1 por maquina)              (1 por maquina)            (1 por contenedor)        
# kubectl apply -f NOMBRE_FICHERO
# docker-compose -f NOMBRE_FICHERO up
